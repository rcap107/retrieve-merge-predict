"""
Figure: tradeoffs between retrieval methods.
"""

# %%
# %cd ~/bench
# # %%
# %load_ext autoreload
# %autoreload 2

# %%
import numpy as np
import matplotlib.pyplot as plt
from matplotlib import ticker
import polars as pl

plt.style.use("seaborn-v0_8-talk")
# %%
methods = ["Exact", "Minhash", "Hybrid", "Starmie"]
dd = {
    "method": methods,
    "fixed_cost": [0, 2000, 2000, 18000],
    "column_cost": [800, 5, 470, 510],
}
df = pl.from_dict(dd)
# %%
# Prepare the list of points according to the slope
rows = []
for _n in range(11):
    for m in methods:
        fixed_cost = df.filter(pl.col("method") == m).select("fixed_cost").item()
        column_cost = df.filter(pl.col("method") == m).select("column_cost").item()
        r = [m, _n, fixed_cost + column_cost * _n]
        rows.append(r)
res = pl.DataFrame(rows)
df_plotting = res.group_by(pl.col("column_0")).agg(pl.all())

# %%
# Using a split axis because Starmie is throwing off the scale
fig, (ax1, ax2) = plt.subplots(2, 1, sharex=True, figsize=(5, 2.5))
fig.subplots_adjust(hspace=0.05)
fig.supylabel("Retrieval time", x=-0.01, fontsize="x-large")

for ax in (ax1, ax2):
    for c in df_plotting.iter_rows():
        ax.plot(c[1], c[2], label=c[0], marker="o", markersize=5)
        ax.fill_between(c[1], c[2], y2=0, alpha=0.2)

# Note that axes are in seconds
ax1.set_ylim(17000, 24000)
ax2.set_ylim(0, 9000)


# Fixing formatting
def func_form(x, pos):
    return f"{x/3600:.0f}h"


major_formatter = ticker.FuncFormatter(func_form)
major_locator = ticker.FixedLocator(np.arange(0, 34000, 3600))

ax1.yaxis.set_major_locator(major_locator)
ax1.yaxis.set_major_formatter(major_formatter)
ax2.yaxis.set_major_locator(major_locator)
ax2.yaxis.set_major_formatter(major_formatter)

ax2.set_xlabel("Number of query columns")

# Fixing legend
ax1.legend(
    loc="upper left",
    bbox_to_anchor=(0.5, 1.8),
    ncols=2,
    mode="expand",
    edgecolor="white",
)

# Hiding the axis edges to make it look seamless
ax1.spines.bottom.set_visible(False)
ax2.spines.top.set_visible(False)
ax1.xaxis.tick_top()
ax1.tick_params(labeltop=False)  # don't put tick labels at the top
ax2.xaxis.tick_bottom()

# Prepare the markers
d = 0.5  # proportion of vertical to horizontal extent of the slanted line
kwargs = dict(
    marker=[(-1, -d), (1, d)],
    markersize=12,
    linestyle="none",
    color="k",
    mec="k",
    mew=1,
    clip_on=False,
)
ax1.plot([0, 1], [0, 0], transform=ax1.transAxes, **kwargs)
ax2.plot([0, 1], [1, 1], transform=ax2.transAxes, **kwargs)

# Plot the intersection between the slope for exact and that for minhash
x_ = dd["fixed_cost"][1] / (dd["column_cost"][0] - dd["column_cost"][1])
y_ = x_ * 800
ax2.plot((x_, x_), (0, y_), color="black", linestyle="--")

# Plot the intersection between the slope for exact and that for hybrid minhash
x_ = dd["fixed_cost"][2] / (dd["column_cost"][0] - dd["column_cost"][2])
y_ = x_ * 800
ax2.plot((x_, x_), (0, y_), linestyle="--", color="black")

ax2.plot(x_, y_, color="black", marker="+")

# fig.savefig("images/tradeoff-retrieval.pdf", bbox_inches="tight")
# fig.savefig("images/tradeoff-retrieval.png", bbox_inches="tight")
